@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using FleetCommander.App.Shared
@inject NavigationManager NavigationManager

<div style="overflow: auto;">
    <canvas id="pixi-surface" style="width: 3000px; height: 3000px"></canvas>
</div>


<div class="form-group">
    <label>
        User:
        <input @bind="_userInput" />
    </label>
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="_messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

@inject IJSRuntime JSRuntime;
@code{

    private HubConnection _hubConnection;
    private string _userInput;
    private string _messageInput;
    

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gameHub"))
            .Build();

        _hubConnection.On<GameBoard>("gameStateChanged", (board) =>
        {
            ClientGameState.GameBoard = board;
            JSRuntime.InvokeVoidAsync("window.onGameStateChanged",board).ConfigureAwait(false);

        });

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            Console.WriteLine($"{user}: {message}");
            var encodedMsg = $"{user}: {message}";
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    Task Send()
    {
        Console.WriteLine("SendMessage");
        return _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
    }


    public bool IsConnected =>
        _hubConnection.State == HubConnectionState.Connected;

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        JSRuntime.InvokeAsync<bool>("init");
    }




}